Bugs
- Camera clipping start doesn't match cycles render, nor OpenGL scene view.
  And ospray only supports setting the clipping start, not a far clip value.
- Add top-level exception handling in the server
- https://developer.blender.org/T59089 (get evee render instead of custom one)
- https://developer.blender.org/T64295 (custom props not updating in UI)

Fix/improve
- Correctly release the scene after rendering
- If possible, get rid of OpenEXR as intermediate framebuffer file
  (depends on possibilities of blender API)
- Point and spot lights need a very high intensity value to contribute
  substantial light to the scene, while the sun light at 1 is already enough.
  For area lights the intensity value in ospray is per unit area, so scaling the
  light larger leads to more light in the scene. This is different from cycles,
  where changing the size keeps the scene lighting the same.

Must haves
- Light UI panel
- Volume UI panel
- Camera UI panel
- More render settings in the UI
- TF editor in Blender
- Interactive preview rendering
- Better error handling and recovery
- Better handling of instancing and (particle system) duplication, i.e. don't duplicate mesh
- Cancel render during export of large scenes (if this is even possible)
- Caching of large data sets across renders
- Allow plugins to provide user-defined proxy geometry, not just a bbox

Very nice to haves ;-)
- UI buttons to preload/clear the scene on the server, including
  setting object bboxes of volumes to correct sizes (see also next point)
- UI button to query bbox/proxy geometry of server-side scene objects.
  We currently do this implicitly during the scene export phase of
  rendering, but since we're operating on a depsgraph copy this actually
  will not work (nor should we try to update the bbox mesh at that point). 
  So the user should query the bbox/proxies manually outside of the rendering
  step.

Nice to haves
- Start/stop server during rendering automatically
- UI button to get stats from server on currently loaded scene
- Handle text objects
- Reduce overhead in server -> client communication. E.g. render
  of angel.blend in 3840x2160 @ 4 spp takes 40.972s on the server,
  but 46.90s on the blender side (i.e. +14.5% longer)
- Textured geometry
- Provide a list of render presets

Obscure to haves
- Handle multiple concurrent renders in Blender
- Optimize scene when Blender instances are used
- Log file for the server

Decide
- Protobuf is very nice for the combo data layout description, 
  serialization, application API it provides. But it is an extra dependency
  that users would need to install. Can we locally include protobuf
  in the sources and build process? Or should we get rid of it
  altogether?
  

Test
...

Look into
- How to leverage blender's node system
- OSPRay's extension modules and scenegraph, mostly w.r.t. model loading.
  Plus look at overlap in functionality with our own plugins. It seems
  ospray plugins need an ispc component, which makes them less attractive
  to use for end users (yet another tool/syntax to learn).
- For batch renders there's no need to send the framebuffer for each
  sample, only need the final buffer, but not sure we can detect that 
  specific situation. Should look into how cycles handles this case
